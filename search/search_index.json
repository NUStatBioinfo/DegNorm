{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DegNorm Home DegNorm source code on GitHub Overview DegNorm, short for deg radation norm alization is a genomics pipeline that addresses trascript degradation on a (gene, sample)-specific level that can otherwise substantially bias the results of an RNA-Seq analysis. Most existing global degradation normalization approaches (global in the sense of being across-genes, across-samples) can be ineffective in correcting RNA degradation bias. A key result from running DegNorm is the adjustment of read counts for transcript degradation heterogeneity on a per-gene, per-sample basis while simultaneously controlling for sequencing depth. Underlying the DegNorm pipeline is the rank-one over-approximation of a gene's coverage matrix , or, the matrix of per-sample, per-nucleotide-aligned reads. For each gene DegNorm will estimate an envelope function and a scale factor for each sample. Samples whose true coverage curve lies well below their estimated coverage curve are considered degraded, and are assigned a degradation index score (or, DI score) of between 0 and 1. Batch effects can be captured by comparing the distribution of DI scores between samples. The DegNorm pipeline is comprised of the following steps Load in RNA-Seq .sam files . If passed .bam files, DegNorm will attempt to convert them to .sam files if you have samtools installed. It will also determine whether the RNA-Seq experiment was obtained from a paired read or single read platform. Parse a genome annotation file (.gtf or .gff). DegNorm determines the relative start and end positions of each gene transcript and each exon comprising each gene on each chromosome. Genes occurring on multiple chromosomes and exons occurring on multiple genes are removed. The total number of genes is referred to as n . Compute the chromosome-wide coverage for each experiment. DegNorm does not use standard coverage tools (e.g. geneomecov ) that do not take into account paired read overlap when computing coverage - here, every match segment of a read's CIGAR score augments nucleotide coverage. For each experiment, for each chromosome, we save coverage in a compressed Numpy array. There are p experiments. Assess per-gene read counts by counting the number of paired reads falling entirely within the start and end position of every gene. The read count matrix is a n x p matrix. Break up chromosome coverage matrices into per-gene coverage matrices . Gene matrices are saved to pickle file (a serialized data format for Python), one .pkl file per chromosome. Fit a non-negative matrix factorization with over-approximation model, as outlined in the central DegNorm paper. Save adjusted read counts, gene- and experiment-specific degradation index scores , normalized coverage matrices, and coverage visualizations to an output directory.","title":"Home"},{"location":"#degnorm-home","text":"DegNorm source code on GitHub","title":"DegNorm Home"},{"location":"#overview","text":"DegNorm, short for deg radation norm alization is a genomics pipeline that addresses trascript degradation on a (gene, sample)-specific level that can otherwise substantially bias the results of an RNA-Seq analysis. Most existing global degradation normalization approaches (global in the sense of being across-genes, across-samples) can be ineffective in correcting RNA degradation bias. A key result from running DegNorm is the adjustment of read counts for transcript degradation heterogeneity on a per-gene, per-sample basis while simultaneously controlling for sequencing depth. Underlying the DegNorm pipeline is the rank-one over-approximation of a gene's coverage matrix , or, the matrix of per-sample, per-nucleotide-aligned reads. For each gene DegNorm will estimate an envelope function and a scale factor for each sample. Samples whose true coverage curve lies well below their estimated coverage curve are considered degraded, and are assigned a degradation index score (or, DI score) of between 0 and 1. Batch effects can be captured by comparing the distribution of DI scores between samples. The DegNorm pipeline is comprised of the following steps Load in RNA-Seq .sam files . If passed .bam files, DegNorm will attempt to convert them to .sam files if you have samtools installed. It will also determine whether the RNA-Seq experiment was obtained from a paired read or single read platform. Parse a genome annotation file (.gtf or .gff). DegNorm determines the relative start and end positions of each gene transcript and each exon comprising each gene on each chromosome. Genes occurring on multiple chromosomes and exons occurring on multiple genes are removed. The total number of genes is referred to as n . Compute the chromosome-wide coverage for each experiment. DegNorm does not use standard coverage tools (e.g. geneomecov ) that do not take into account paired read overlap when computing coverage - here, every match segment of a read's CIGAR score augments nucleotide coverage. For each experiment, for each chromosome, we save coverage in a compressed Numpy array. There are p experiments. Assess per-gene read counts by counting the number of paired reads falling entirely within the start and end position of every gene. The read count matrix is a n x p matrix. Break up chromosome coverage matrices into per-gene coverage matrices . Gene matrices are saved to pickle file (a serialized data format for Python), one .pkl file per chromosome. Fit a non-negative matrix factorization with over-approximation model, as outlined in the central DegNorm paper. Save adjusted read counts, gene- and experiment-specific degradation index scores , normalized coverage matrices, and coverage visualizations to an output directory.","title":"Overview"},{"location":"about/license/","text":"License BSD 2-Clause Copyright (c) 2018 Northwestern Statistical Bioinformatics Lab All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIEDi WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"about/license/#license","text":"","title":"License"},{"location":"about/license/#bsd-2-clause","text":"Copyright (c) 2018 Northwestern Statistical Bioinformatics Lab All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIEDi WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"BSD 2-Clause"},{"location":"about/release/","text":"Release Notes v0.1.0 (November 2018) First release of DegNorm as a package. degnorm entrypoint is the only supported CLI tool get_coverage_plots and get_coverage_data are the only supported posthoc analysis tools","title":"Release Notes"},{"location":"about/release/#release-notes","text":"","title":"Release Notes"},{"location":"about/release/#v010-november-2018","text":"First release of DegNorm as a package. degnorm entrypoint is the only supported CLI tool get_coverage_plots and get_coverage_data are the only supported posthoc analysis tools","title":"v0.1.0 (November 2018)"},{"location":"howtos/installation/","text":"Installation This package is not yet on PyPi . These instructions are for manual installation into a virtual environment. DegNorm is only supported on *Nix platforms. 1. Clone the DegNorm repository and cd into it. git clone git@github.com:NUStatBioinfo/DegNorm.git cd DegNorm 2. Create a conda virtual environment (or some other python3 virtual environment) and activate it: conda create -n degnorm python=3.6 3. Run the install script ./install Testing Check the successful installation of degnorm on your machine with the degnorm_test command. This runs all unit tests and a minimal DegNorm pipeline run on a small batch of sample data. By default, degnorm_test will clean up after itself by removing the temporary directory containing the output of a full pipeline test run. If you would like to keep and inspect that directory, add the --keep-output flag: degnorm_test --keep-output","title":"Installation"},{"location":"howtos/installation/#installation","text":"This package is not yet on PyPi . These instructions are for manual installation into a virtual environment. DegNorm is only supported on *Nix platforms.","title":"Installation"},{"location":"howtos/installation/#1-clone-the-degnorm-repository-and-cd-into-it","text":"git clone git@github.com:NUStatBioinfo/DegNorm.git cd DegNorm","title":"1. Clone the DegNorm repository and cd into it."},{"location":"howtos/installation/#2-create-a-conda-virtual-environment-or-some-other-python3-virtual-environment-and-activate-it","text":"conda create -n degnorm python=3.6","title":"2. Create a conda virtual environment (or some other python3 virtual environment) and activate it:"},{"location":"howtos/installation/#3-run-the-install-script","text":"./install","title":"3. Run the install script"},{"location":"howtos/installation/#testing","text":"Check the successful installation of degnorm on your machine with the degnorm_test command. This runs all unit tests and a minimal DegNorm pipeline run on a small batch of sample data. By default, degnorm_test will clean up after itself by removing the temporary directory containing the output of a full pipeline test run. If you would like to keep and inspect that directory, add the --keep-output flag: degnorm_test --keep-output","title":"Testing"},{"location":"howtos/posthoc_analysis/","text":"The degnorm.data_access module Once you've run the DegNorm pipeline and obtained an output directory, there is a lot of raw and estimated coverage matrix data wrapped up in dictionaries stored as .pkl files. Because we can't determine which genes a researcher will be interested in prior to a DegNorm run, we provide a couple of easy-to-use functions to grab and visualize the coverage data on the fly. get_coverage_data Should you need the raw or DegNorm-estimated coverage matrices generated by a degnorm run, the get_coverage_data function can load up individual genes' or every gene's coverage data with the option to save those matrices to individual .txt files. from degnorm.data_access import get_coverage_data degnorm_dir = '/DegNorm_09022018_214247' # pass one or many gene names, load up coverage matrix dictionary cov_dat = get_coverage_data('TMEM229B' , degnorm_dir=degnorm_dir) You can automatically save those coverage matrices as .txt files by specifying the save_dir argument. Raw and estimated coverage matrices are stored in per-chromosome subdirectories as tall DataFrames with sample identifiers serving as the headers. By setting save_dir=degnorm_dir , you can write the .txt files back to the original DegNorm output directory. save_dir='FFvsFFPE_data' cov_dat = get_coverage_data('TMEM229B' , degnorm_dir=degnorm_dir , save_dir=save_dir) # save all genes' coverage data to .txt files cov_dat = get_coverage_data('all' , degnorm_dir=degnorm_dir , save_dir=save_dir) The returned object cov_dat is a dictionary whose keys are named after genes, and each gene's value is a dictionary with raw and estimate coverage pandas.DataFrame values. get_coverage_plots Should you need coverage plots in addition to the ones generated during a DegNorm pipeline run, get_coverage_plots leverages the coverage matrix data in the .pkl files to make new pre- and post-DegNorm coverage curve plots. Use it similarly to get_coverage_data . Pass one gene, a list of multiple genes, or the string 'all' to plot every gene's coverage. If you're not saving plots (by using the save_dir argument) then this function returns a list of plots. from degnorm.data_access import get_coverage_plots plots = get_coverage_plots(['SDF4', 'TMEM229B'] , degnorm_dir=degnorm_dir) plots[0].show() Most pipeline runs involve 1000s of genes, so rendering a plot for all genes will likely take a bit of time. You can also save the resulting plots by specifying a save_dir argument to the path of a directory where you want to save the plots. Each gene is saved in a chromosome-level directory. You can still use genes='all' to generate a coverage plot for every gene. out = get_coverage_plots('all' , degnorm_dir=degnorm_dir , save_dir=degnorm_dir)","title":"Posthoc Analysis"},{"location":"howtos/posthoc_analysis/#the-degnormdata_access-module","text":"Once you've run the DegNorm pipeline and obtained an output directory, there is a lot of raw and estimated coverage matrix data wrapped up in dictionaries stored as .pkl files. Because we can't determine which genes a researcher will be interested in prior to a DegNorm run, we provide a couple of easy-to-use functions to grab and visualize the coverage data on the fly.","title":"The degnorm.data_access module"},{"location":"howtos/posthoc_analysis/#get_coverage_data","text":"Should you need the raw or DegNorm-estimated coverage matrices generated by a degnorm run, the get_coverage_data function can load up individual genes' or every gene's coverage data with the option to save those matrices to individual .txt files. from degnorm.data_access import get_coverage_data degnorm_dir = '/DegNorm_09022018_214247' # pass one or many gene names, load up coverage matrix dictionary cov_dat = get_coverage_data('TMEM229B' , degnorm_dir=degnorm_dir) You can automatically save those coverage matrices as .txt files by specifying the save_dir argument. Raw and estimated coverage matrices are stored in per-chromosome subdirectories as tall DataFrames with sample identifiers serving as the headers. By setting save_dir=degnorm_dir , you can write the .txt files back to the original DegNorm output directory. save_dir='FFvsFFPE_data' cov_dat = get_coverage_data('TMEM229B' , degnorm_dir=degnorm_dir , save_dir=save_dir) # save all genes' coverage data to .txt files cov_dat = get_coverage_data('all' , degnorm_dir=degnorm_dir , save_dir=save_dir) The returned object cov_dat is a dictionary whose keys are named after genes, and each gene's value is a dictionary with raw and estimate coverage pandas.DataFrame values.","title":"get_coverage_data"},{"location":"howtos/posthoc_analysis/#get_coverage_plots","text":"Should you need coverage plots in addition to the ones generated during a DegNorm pipeline run, get_coverage_plots leverages the coverage matrix data in the .pkl files to make new pre- and post-DegNorm coverage curve plots. Use it similarly to get_coverage_data . Pass one gene, a list of multiple genes, or the string 'all' to plot every gene's coverage. If you're not saving plots (by using the save_dir argument) then this function returns a list of plots. from degnorm.data_access import get_coverage_plots plots = get_coverage_plots(['SDF4', 'TMEM229B'] , degnorm_dir=degnorm_dir) plots[0].show() Most pipeline runs involve 1000s of genes, so rendering a plot for all genes will likely take a bit of time. You can also save the resulting plots by specifying a save_dir argument to the path of a directory where you want to save the plots. Each gene is saved in a chromosome-level directory. You can still use genes='all' to generate a coverage plot for every gene. out = get_coverage_plots('all' , degnorm_dir=degnorm_dir , save_dir=degnorm_dir)","title":"get_coverage_plots"},{"location":"howtos/run_the_pipeline/","text":"Running DegNorm DegNorm is a CLI tool. You can access it through the degnorm command. Inputs You only need two types of files to supply degnorm 1. (Paired or single eng) aligned reads data At least two aligned reads files must be supplied, as inter-sample degradation normalization can't happen on a standalone RNA-Seq expermient. Use p to refer to the total number of experiments. If you have samtools installed, feel free to provide .bam files - DegNorm will convert them to their text equivalent via samtools view -h -o {.sam} {.bam} . It is assumed your .sam files abide by the conventions . You can supply paired reads files or single end reads files . Argument Required? Meaning -i , --input-files Only if --input-dir not supplied Individual .sam or .bam files. Any .bam files will be converted to .sam if samtools is available. --input-dir Only if input files not supplied A directory containing a set of .sam files. In this case, .bam files will be ignored. -u , --unique-alignments optional flag If specified, tells DegNorm to remove reads aligned to more than one area of the genome. Suggested for use with single end reads data. 2. Genome annotation file DegNorm needs a .gtf file to determine the transcript for computing the per-gene coverage curves, which span a concatenation of the coding regions only (introns are ignored). It is assumed your .gtf file abides by the conventions Argument Required? Meaning -g , --genome-annotation Yes .gtf file for relevant genome. Using a \"warm start\" directory Loading multiple .sam files, parsing a .gtf files, and computing per-gene cross-sample coverage matrices and read counts, can take some time, but there is really no need to run this process more than once for a specific set of RNA-Seq experiments. If you run the degnorm pipeline once, you can leverage the stored coverage, read counts, and parsed transcript data from an existing DegNorm output directory to start a a new DegNorm run where all of the data preprocessing is already completed. When using --warm-start-dir you do not need to supply a .gtf file. Argument Required? Meaning --warm-start-dir No A directory holding the contents of a successful previous degnorm pipeline run. When specified, there is no need to supply a .gtf file. Runtime and algorithmic parameters Argument Required? Meaning -o , --output-dir No Defaults to the current working directory. Use to specify location where pipeline output directory will be written. --plot-genes No Names of genes for which to render coverage plots. Sequence of explictly stated gene names or a .txt file containing one gene name per line. -d , --downsample-rate No EXPERIMENTAL. Integer downsampling rate. Systematic samples of a coverage matrix are used to speed up NMF iterations. --nmf-iter No Number of iterations per NMF-OA approximation. The higher the more accurate the approximation, but the more costly in terms of time. --iter No Number of whole DegNorm iterations. Default is 5. --minimax-coverage No Minimum cross-sample maximum coverage for a gene before it is included in the DegNorm pipeline. Can be used to exclude relatively low-coverage genes. -s , --skip-baseline-selection No EXPERIMENTAL. Flag to skip baseline selection, will greatly speed up DegNorm iterations. -c , --cpu No Integer number of threads. The more the better. Example usage Run DegNorm with an input directory (containing multiple .sam files) with 20 threads, use 5 DegNorm iterations and 50 NMF iterations per gene per NMF iteration. Route output to a directory besides the current working directory. degnorm --input-dir degnorm_data/GBM \\ -g human.gtf \\ -c 20 \\ --nmf-iter 50 \\ -o degnorm_output Run DegNorm on from a warm start directory (from a previous run). This time, do not include genes with a maximum coverage (across all samples) less than 20, and only run 3 DegNorm iterations. degnorm --warm-start-dir degnorm_output/DegNorm_GBM_102018 \\ -c 20 \\ -o degnorm_output \\ -minimax-coverage \\ --iter 3 Output Raw and estimated coverage data are stored in separate .pkl files, one file per chromosome. See the posthoc analysis documentation for helper functions to access coverage data. In addition to per-gene coverage matrices, degnorm will produce raw and degradation-adjusted read counts, a matrix of degradation index scores, a matrix describing which genes were sent through the baseline selection procedure and when, along with various summary graphics and a pipeline summary report. The report will render as an .html file, but if you have pandoc installed it will be converted to a .pdf. \u251c\u2500\u2500 degnorm.log \u251c\u2500\u2500 degradation_index_scores.csv \u251c\u2500\u2500 ran_baseline_selection.csv \u251c\u2500\u2500 adjusted_read_counts.csv \u251c\u2500\u2500 read_counts.csv \u251c\u2500\u2500 adjusted_read_counts.csv \u251c\u2500\u2500 SAMPLE_1 \u2502 \u251c\u2500\u2500 sample_SAMPLE_1_chr1.npz \u2502 \u251c\u2500\u2500 sample_SAMPLE_1_chr2.npz \u2502 \u251c\u2500\u2500 <more sample chromosome coverage .npz files> \u251c\u2500\u2500 SAMPLE_2 \u2502 \u251c\u2500\u2500 sample_SAMPLE_2_chr1.npz \u2502 \u251c\u2500\u2500 sample_SAMPLE_2_chr2.npz \u2502 \u251c\u2500\u2500 <more per-sample chromosome coverage .npz files> \u251c\u2500\u2500 <more sample directories with chromosome coverage> \u251c\u2500\u2500 chr1 \u2502 \u251c\u2500\u2500 GAPDH_coverage.png \u2502 \u251c\u2500\u2500 <more coverage plots> \u2502 \u251c\u2500\u2500 coverage_matrices_chr1.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr1.pkl \u251c\u2500\u2500 chr2 \u2502 \u251c\u2500\u2500 coverage_matrices_chr2.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr2.pkl \u251c\u2500\u2500 chr3 \u2502 \u251c\u2500\u2500 coverage_matrices_chr3.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr3.pkl \u251c\u2500\u2500 chr4 \u2502 \u251c\u2500\u2500 GAPDH_coverage.png \u2502 \u251c\u2500\u2500 coverage_matrices_chr4.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr4.pkl \u251c\u2500\u2500 <more chromosome directories> \u2502 \u251c\u2500\u2500 <more raw coverage matrix .pkl files> \u2502 \u2514\u2500\u2500 <more estimated coverage matrix .pkl files> \u2514\u2500\u2500 report \u251c\u2500\u2500 degnorm_summary.pdf # (or .html if pandoc not available) \u251c\u2500\u2500 di_boxplots.png \u251c\u2500\u2500 di_correlation.png \u2514\u2500\u2500 di_heatmap.png","title":"Running DegNorm"},{"location":"howtos/run_the_pipeline/#running-degnorm","text":"DegNorm is a CLI tool. You can access it through the degnorm command.","title":"Running DegNorm"},{"location":"howtos/run_the_pipeline/#inputs","text":"You only need two types of files to supply degnorm","title":"Inputs"},{"location":"howtos/run_the_pipeline/#1-paired-or-single-eng-aligned-reads-data","text":"At least two aligned reads files must be supplied, as inter-sample degradation normalization can't happen on a standalone RNA-Seq expermient. Use p to refer to the total number of experiments. If you have samtools installed, feel free to provide .bam files - DegNorm will convert them to their text equivalent via samtools view -h -o {.sam} {.bam} . It is assumed your .sam files abide by the conventions . You can supply paired reads files or single end reads files . Argument Required? Meaning -i , --input-files Only if --input-dir not supplied Individual .sam or .bam files. Any .bam files will be converted to .sam if samtools is available. --input-dir Only if input files not supplied A directory containing a set of .sam files. In this case, .bam files will be ignored. -u , --unique-alignments optional flag If specified, tells DegNorm to remove reads aligned to more than one area of the genome. Suggested for use with single end reads data.","title":"1. (Paired or single eng) aligned reads data"},{"location":"howtos/run_the_pipeline/#2-genome-annotation-file","text":"DegNorm needs a .gtf file to determine the transcript for computing the per-gene coverage curves, which span a concatenation of the coding regions only (introns are ignored). It is assumed your .gtf file abides by the conventions Argument Required? Meaning -g , --genome-annotation Yes .gtf file for relevant genome.","title":"2. Genome annotation file"},{"location":"howtos/run_the_pipeline/#using-a-warm-start-directory","text":"Loading multiple .sam files, parsing a .gtf files, and computing per-gene cross-sample coverage matrices and read counts, can take some time, but there is really no need to run this process more than once for a specific set of RNA-Seq experiments. If you run the degnorm pipeline once, you can leverage the stored coverage, read counts, and parsed transcript data from an existing DegNorm output directory to start a a new DegNorm run where all of the data preprocessing is already completed. When using --warm-start-dir you do not need to supply a .gtf file. Argument Required? Meaning --warm-start-dir No A directory holding the contents of a successful previous degnorm pipeline run. When specified, there is no need to supply a .gtf file.","title":"Using a \"warm start\" directory"},{"location":"howtos/run_the_pipeline/#runtime-and-algorithmic-parameters","text":"Argument Required? Meaning -o , --output-dir No Defaults to the current working directory. Use to specify location where pipeline output directory will be written. --plot-genes No Names of genes for which to render coverage plots. Sequence of explictly stated gene names or a .txt file containing one gene name per line. -d , --downsample-rate No EXPERIMENTAL. Integer downsampling rate. Systematic samples of a coverage matrix are used to speed up NMF iterations. --nmf-iter No Number of iterations per NMF-OA approximation. The higher the more accurate the approximation, but the more costly in terms of time. --iter No Number of whole DegNorm iterations. Default is 5. --minimax-coverage No Minimum cross-sample maximum coverage for a gene before it is included in the DegNorm pipeline. Can be used to exclude relatively low-coverage genes. -s , --skip-baseline-selection No EXPERIMENTAL. Flag to skip baseline selection, will greatly speed up DegNorm iterations. -c , --cpu No Integer number of threads. The more the better.","title":"Runtime and algorithmic parameters"},{"location":"howtos/run_the_pipeline/#example-usage","text":"Run DegNorm with an input directory (containing multiple .sam files) with 20 threads, use 5 DegNorm iterations and 50 NMF iterations per gene per NMF iteration. Route output to a directory besides the current working directory. degnorm --input-dir degnorm_data/GBM \\ -g human.gtf \\ -c 20 \\ --nmf-iter 50 \\ -o degnorm_output Run DegNorm on from a warm start directory (from a previous run). This time, do not include genes with a maximum coverage (across all samples) less than 20, and only run 3 DegNorm iterations. degnorm --warm-start-dir degnorm_output/DegNorm_GBM_102018 \\ -c 20 \\ -o degnorm_output \\ -minimax-coverage \\ --iter 3","title":"Example usage"},{"location":"howtos/run_the_pipeline/#output","text":"Raw and estimated coverage data are stored in separate .pkl files, one file per chromosome. See the posthoc analysis documentation for helper functions to access coverage data. In addition to per-gene coverage matrices, degnorm will produce raw and degradation-adjusted read counts, a matrix of degradation index scores, a matrix describing which genes were sent through the baseline selection procedure and when, along with various summary graphics and a pipeline summary report. The report will render as an .html file, but if you have pandoc installed it will be converted to a .pdf. \u251c\u2500\u2500 degnorm.log \u251c\u2500\u2500 degradation_index_scores.csv \u251c\u2500\u2500 ran_baseline_selection.csv \u251c\u2500\u2500 adjusted_read_counts.csv \u251c\u2500\u2500 read_counts.csv \u251c\u2500\u2500 adjusted_read_counts.csv \u251c\u2500\u2500 SAMPLE_1 \u2502 \u251c\u2500\u2500 sample_SAMPLE_1_chr1.npz \u2502 \u251c\u2500\u2500 sample_SAMPLE_1_chr2.npz \u2502 \u251c\u2500\u2500 <more sample chromosome coverage .npz files> \u251c\u2500\u2500 SAMPLE_2 \u2502 \u251c\u2500\u2500 sample_SAMPLE_2_chr1.npz \u2502 \u251c\u2500\u2500 sample_SAMPLE_2_chr2.npz \u2502 \u251c\u2500\u2500 <more per-sample chromosome coverage .npz files> \u251c\u2500\u2500 <more sample directories with chromosome coverage> \u251c\u2500\u2500 chr1 \u2502 \u251c\u2500\u2500 GAPDH_coverage.png \u2502 \u251c\u2500\u2500 <more coverage plots> \u2502 \u251c\u2500\u2500 coverage_matrices_chr1.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr1.pkl \u251c\u2500\u2500 chr2 \u2502 \u251c\u2500\u2500 coverage_matrices_chr2.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr2.pkl \u251c\u2500\u2500 chr3 \u2502 \u251c\u2500\u2500 coverage_matrices_chr3.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr3.pkl \u251c\u2500\u2500 chr4 \u2502 \u251c\u2500\u2500 GAPDH_coverage.png \u2502 \u251c\u2500\u2500 coverage_matrices_chr4.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr4.pkl \u251c\u2500\u2500 <more chromosome directories> \u2502 \u251c\u2500\u2500 <more raw coverage matrix .pkl files> \u2502 \u2514\u2500\u2500 <more estimated coverage matrix .pkl files> \u2514\u2500\u2500 report \u251c\u2500\u2500 degnorm_summary.pdf # (or .html if pandoc not available) \u251c\u2500\u2500 di_boxplots.png \u251c\u2500\u2500 di_correlation.png \u2514\u2500\u2500 di_heatmap.png","title":"Output"}]}