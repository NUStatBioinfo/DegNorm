{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DegNorm Home DegNorm source code on GitHub What is DegNorm? DegNorm, short for deg radation norm alization, is a bioinformatics pipeline designed to correct for bias due to the heterogeneous patterns of transcript degradation in RNA-seq data. DegNorm helps improve the accuracy of the differential expression analysis by accounting for this degradation. In practice, RNA samples are often more-or-less degraded, and the degradation severity is not only sample-specific, but gene-specific as well. It is known that longer genes tend to degrade faster than shorter ones. As such, commonplace global degradation normalization approaches that impose a single normalization factor on all genes within a sample can be ineffective in correcting for RNA degradation bias. DegNorm is a data-driven approach for RNA-Seq normalization resulting in the adjusted read count matrix. This adjustment applies to each gene within each sample, accounting for sample- and gene-specific degradation bias while simultaneously controlling for the sequencing depth. The algorithm at the center of DegNorm is the rank-one over-approximation of a gene's coverage score matrix, which is comprised of the different samples' coverage score curves along the transcript for each gene. For each gene, DegNorm estimates (1) an envelope function representing the ideal shape of the gene's coverage curve when no degradation is present, and (2) scale factors for each sample (for said gene) that indicates the relative abundance of the gene within the sample. Define a (gene, sample) degradation index score (DI score) as the area between the scaled envelope function and the actual coverage score function, divided by the area under the scaled envelope function, for each gene within each sample. The DI score can be used to account for read count loss due to degradation. How does the pipeline work? The DegNorm pipeline is comprised of the following steps Load in sorted .bam files . DegNorm also requires bam index (.bai) files - these can be created for you if samtools is in your $PATH . DegNorm will determine whether the RNA-Seq experiment was obtained from a paired read or single read platform. Parse a genome annotation file (.gtf or .gff). We determine the start and end positions of all exons comprising each gene in each chromosome. Each gene's total transcript is constructed by concatenating all annotated exons sequentially. Exons shared by multiple genes are removed from the total transcript. The total number of genes is referred to as n . Compute gene coverage matrices . DegNorm does not use standard coverage tools (e.g. geneomecov ), as they do not take into account the overlap of paired-end reads when computing coverage. DegNorm reads the CIGAR score and determines whether two paired reads overlap. The overlapped region is only counted once in the coverage score calculation. There are p experiments. Assess per-gene read counts by counting the number of pairs of reads (in the paired data) or number of reads (single-end) falling entirely within the start and end position of every gene. The read count matrix has dimensions (n, p) . Fit a non-negative matrix factorization with over-approximation model, as outlined in the central DegNorm paper. Save output data to an output directory that includes original read counts degradation-adjusted read counts gene-/sample-specific degradation index scores raw coverage matrices stored in .pkl files, one file per chromosome normalized coverage matrices, also stored in .pkl files, one file per chromosome DegNorm summary report","title":"Home"},{"location":"#degnorm-home","text":"DegNorm source code on GitHub","title":"DegNorm Home"},{"location":"#what-is-degnorm","text":"DegNorm, short for deg radation norm alization, is a bioinformatics pipeline designed to correct for bias due to the heterogeneous patterns of transcript degradation in RNA-seq data. DegNorm helps improve the accuracy of the differential expression analysis by accounting for this degradation. In practice, RNA samples are often more-or-less degraded, and the degradation severity is not only sample-specific, but gene-specific as well. It is known that longer genes tend to degrade faster than shorter ones. As such, commonplace global degradation normalization approaches that impose a single normalization factor on all genes within a sample can be ineffective in correcting for RNA degradation bias. DegNorm is a data-driven approach for RNA-Seq normalization resulting in the adjusted read count matrix. This adjustment applies to each gene within each sample, accounting for sample- and gene-specific degradation bias while simultaneously controlling for the sequencing depth. The algorithm at the center of DegNorm is the rank-one over-approximation of a gene's coverage score matrix, which is comprised of the different samples' coverage score curves along the transcript for each gene. For each gene, DegNorm estimates (1) an envelope function representing the ideal shape of the gene's coverage curve when no degradation is present, and (2) scale factors for each sample (for said gene) that indicates the relative abundance of the gene within the sample. Define a (gene, sample) degradation index score (DI score) as the area between the scaled envelope function and the actual coverage score function, divided by the area under the scaled envelope function, for each gene within each sample. The DI score can be used to account for read count loss due to degradation.","title":"What is DegNorm?"},{"location":"#how-does-the-pipeline-work","text":"The DegNorm pipeline is comprised of the following steps Load in sorted .bam files . DegNorm also requires bam index (.bai) files - these can be created for you if samtools is in your $PATH . DegNorm will determine whether the RNA-Seq experiment was obtained from a paired read or single read platform. Parse a genome annotation file (.gtf or .gff). We determine the start and end positions of all exons comprising each gene in each chromosome. Each gene's total transcript is constructed by concatenating all annotated exons sequentially. Exons shared by multiple genes are removed from the total transcript. The total number of genes is referred to as n . Compute gene coverage matrices . DegNorm does not use standard coverage tools (e.g. geneomecov ), as they do not take into account the overlap of paired-end reads when computing coverage. DegNorm reads the CIGAR score and determines whether two paired reads overlap. The overlapped region is only counted once in the coverage score calculation. There are p experiments. Assess per-gene read counts by counting the number of pairs of reads (in the paired data) or number of reads (single-end) falling entirely within the start and end position of every gene. The read count matrix has dimensions (n, p) . Fit a non-negative matrix factorization with over-approximation model, as outlined in the central DegNorm paper. Save output data to an output directory that includes original read counts degradation-adjusted read counts gene-/sample-specific degradation index scores raw coverage matrices stored in .pkl files, one file per chromosome normalized coverage matrices, also stored in .pkl files, one file per chromosome DegNorm summary report","title":"How does the pipeline work?"},{"location":"about/license/","text":"License MIT Copyright (c) 2018 Northwestern Statistical Bioinformatics Lab All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"","title":"License"},{"location":"about/license/#mit","text":"Copyright (c) 2018 Northwestern Statistical Bioinformatics Lab All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT"},{"location":"about/release/","text":"Release Notes v0.1.2 (December 2018) degnorm_mpi entrypoint available for distributed pipeline runs. change -c (cores flag) to -p (processes per node flag) to reflect that degnorm_mpi runs processes within a node. Update install.sh so that if mpiexec is in PATH , automatically install mpi4py , otherwise don't. Update installation documentation to reflect MPI requirements to run degnorm_mpi . v0.1.1 (November 2018) First release of DegNorm as a package. degnorm entrypoint is the only supported CLI tool get_coverage_plots and get_coverage_data are the only supported posthoc analysis tools","title":"Release notes"},{"location":"about/release/#release-notes","text":"","title":"Release Notes"},{"location":"about/release/#v012-december-2018","text":"degnorm_mpi entrypoint available for distributed pipeline runs. change -c (cores flag) to -p (processes per node flag) to reflect that degnorm_mpi runs processes within a node. Update install.sh so that if mpiexec is in PATH , automatically install mpi4py , otherwise don't. Update installation documentation to reflect MPI requirements to run degnorm_mpi .","title":"v0.1.2 (December 2018)"},{"location":"about/release/#v011-november-2018","text":"First release of DegNorm as a package. degnorm entrypoint is the only supported CLI tool get_coverage_plots and get_coverage_data are the only supported posthoc analysis tools","title":"v0.1.1 (November 2018)"},{"location":"howtos/installation/","text":"Installation This package is not yet on PyPi . These instructions are for manual installation into a virtual environment. DegNorm is only supported on *Nix platforms. Installing DegNorm in a conda environment 1. Clone the DegNorm repository and cd into it. git clone https://github.com/NUStatBioinfo/DegNorm.git cd DegNorm 2. Create a conda virtual environment and activate it: conda create -n degnorm python=3.6 source activate degnorm 3. Run the install script ./install Requirements for degnorm_mpi degnorm_mpi is the distributed implementation of the DegNorm pipeline. To use degnorm_mpi , the mpi4py package must be installed. This requires the MPICH MPI library be installed and configured across your computing environment. From the install script, mpi4py will be installed for you if the mpiexec command is available in your $PATH , indicating that MPI is available in your computing environment. If you're running DegNorm in a high performance computing environment (e.g. if you're at a university or research institute), it is most likely the case that MPI is already installed and available to you in the form of an environment module . Just check that the mpiexec and/or mpirun commands are available to you at the command line when running ./install , and you should be all set to run the distributed pipeline with degnorm_mpi . If MPI is not installed in your compute environment, you will need to take additional steps to do so, or contact your system administrator. See MPICH home for details. Testing Check the successful installation of degnorm on your machine with the degnorm_test command. This runs all unit tests and a minimal DegNorm pipeline run on a small batch of sample data. If you have installed the mpi4py package, and you happen to be testing in a multi-node environment, degnorm_test will also test a small distributed pipeline run with degnorm_mpi . By default, degnorm_test will clean up after itself by removing the temporary directory containing the output of a full pipeline test run. If you would like to keep and inspect that directory, add the --keep-output flag: degnorm_test --keep-output","title":"Installation"},{"location":"howtos/installation/#installation","text":"This package is not yet on PyPi . These instructions are for manual installation into a virtual environment. DegNorm is only supported on *Nix platforms.","title":"Installation"},{"location":"howtos/installation/#installing-degnorm-in-a-conda-environment","text":"","title":"Installing DegNorm in a conda environment"},{"location":"howtos/installation/#1-clone-the-degnorm-repository-and-cd-into-it","text":"git clone https://github.com/NUStatBioinfo/DegNorm.git cd DegNorm","title":"1. Clone the DegNorm repository and cd into it."},{"location":"howtos/installation/#2-create-a-conda-virtual-environment-and-activate-it","text":"conda create -n degnorm python=3.6 source activate degnorm","title":"2. Create a conda virtual environment and activate it:"},{"location":"howtos/installation/#3-run-the-install-script","text":"./install","title":"3. Run the install script"},{"location":"howtos/installation/#requirements-for-degnorm_mpi","text":"degnorm_mpi is the distributed implementation of the DegNorm pipeline. To use degnorm_mpi , the mpi4py package must be installed. This requires the MPICH MPI library be installed and configured across your computing environment. From the install script, mpi4py will be installed for you if the mpiexec command is available in your $PATH , indicating that MPI is available in your computing environment. If you're running DegNorm in a high performance computing environment (e.g. if you're at a university or research institute), it is most likely the case that MPI is already installed and available to you in the form of an environment module . Just check that the mpiexec and/or mpirun commands are available to you at the command line when running ./install , and you should be all set to run the distributed pipeline with degnorm_mpi . If MPI is not installed in your compute environment, you will need to take additional steps to do so, or contact your system administrator. See MPICH home for details.","title":"Requirements for degnorm_mpi"},{"location":"howtos/installation/#testing","text":"Check the successful installation of degnorm on your machine with the degnorm_test command. This runs all unit tests and a minimal DegNorm pipeline run on a small batch of sample data. If you have installed the mpi4py package, and you happen to be testing in a multi-node environment, degnorm_test will also test a small distributed pipeline run with degnorm_mpi . By default, degnorm_test will clean up after itself by removing the temporary directory containing the output of a full pipeline test run. If you would like to keep and inspect that directory, add the --keep-output flag: degnorm_test --keep-output","title":"Testing"},{"location":"howtos/posthoc_analysis/","text":"The degnorm.data_access module Once you've run the DegNorm pipeline and obtained an output directory, there is a lot of raw and estimated coverage matrix data wrapped up in dictionaries stored as .pkl files. Because we can't determine which genes a researcher will be interested in prior to a DegNorm run, we provide a couple of easy-to-use functions to grab and visualize the coverage data on the fly. get_coverage_data Should you need the raw or DegNorm-estimated coverage matrices generated by a degnorm run, the get_coverage_data function can load up individual genes' or every gene's coverage data with the option to save those matrices to individual .txt files. from degnorm.data_access import get_coverage_data degnorm_dir = '/DegNorm_09022018_214247' # pass one or many gene names, load up coverage matrix dictionary cov_dat = get_coverage_data('TMEM229B' , degnorm_dir=degnorm_dir) You can automatically save those coverage matrices as .txt files by specifying the save_dir argument. Raw and estimated coverage matrices are stored in per-chromosome subdirectories as tall DataFrames with sample identifiers serving as the headers. By setting save_dir=degnorm_dir , you can write the .txt files back to the original DegNorm output directory. save_dir='FFvsFFPE_data' cov_dat = get_coverage_data('TMEM229B' , degnorm_dir=degnorm_dir , save_dir=save_dir) # save all genes' coverage data to .txt files cov_dat = get_coverage_data('all' , degnorm_dir=degnorm_dir , save_dir=save_dir) The returned object cov_dat is a dictionary whose keys are named after genes, and each gene's value is a dictionary with raw and estimate coverage pandas.DataFrame values. get_coverage_plots Should you need coverage plots in addition to the ones generated during a DegNorm pipeline run, get_coverage_plots leverages the coverage matrix data in the .pkl files to make new pre- and post-DegNorm coverage curve plots. Use it similarly to get_coverage_data . Pass one gene, a list of multiple genes, or the string 'all' to plot every gene's coverage. If you're not saving plots (by using the save_dir argument) then this function returns a list of plots. from degnorm.data_access import get_coverage_plots plots = get_coverage_plots(['SDF4', 'TMEM229B'] , degnorm_dir=degnorm_dir) plots[0].show() Most pipeline runs involve 1000s of genes, so rendering a plot for all genes will likely take a bit of time. You can also save the resulting plots by specifying a save_dir argument to the path of a directory where you want to save the plots. Each gene is saved in a chromosome-level directory. You can still use genes='all' to generate a coverage plot for every gene. out = get_coverage_plots('all' , degnorm_dir=degnorm_dir , save_dir=degnorm_dir)","title":"Posthoc analysis"},{"location":"howtos/posthoc_analysis/#the-degnormdata_access-module","text":"Once you've run the DegNorm pipeline and obtained an output directory, there is a lot of raw and estimated coverage matrix data wrapped up in dictionaries stored as .pkl files. Because we can't determine which genes a researcher will be interested in prior to a DegNorm run, we provide a couple of easy-to-use functions to grab and visualize the coverage data on the fly.","title":"The degnorm.data_access module"},{"location":"howtos/posthoc_analysis/#get_coverage_data","text":"Should you need the raw or DegNorm-estimated coverage matrices generated by a degnorm run, the get_coverage_data function can load up individual genes' or every gene's coverage data with the option to save those matrices to individual .txt files. from degnorm.data_access import get_coverage_data degnorm_dir = '/DegNorm_09022018_214247' # pass one or many gene names, load up coverage matrix dictionary cov_dat = get_coverage_data('TMEM229B' , degnorm_dir=degnorm_dir) You can automatically save those coverage matrices as .txt files by specifying the save_dir argument. Raw and estimated coverage matrices are stored in per-chromosome subdirectories as tall DataFrames with sample identifiers serving as the headers. By setting save_dir=degnorm_dir , you can write the .txt files back to the original DegNorm output directory. save_dir='FFvsFFPE_data' cov_dat = get_coverage_data('TMEM229B' , degnorm_dir=degnorm_dir , save_dir=save_dir) # save all genes' coverage data to .txt files cov_dat = get_coverage_data('all' , degnorm_dir=degnorm_dir , save_dir=save_dir) The returned object cov_dat is a dictionary whose keys are named after genes, and each gene's value is a dictionary with raw and estimate coverage pandas.DataFrame values.","title":"get_coverage_data"},{"location":"howtos/posthoc_analysis/#get_coverage_plots","text":"Should you need coverage plots in addition to the ones generated during a DegNorm pipeline run, get_coverage_plots leverages the coverage matrix data in the .pkl files to make new pre- and post-DegNorm coverage curve plots. Use it similarly to get_coverage_data . Pass one gene, a list of multiple genes, or the string 'all' to plot every gene's coverage. If you're not saving plots (by using the save_dir argument) then this function returns a list of plots. from degnorm.data_access import get_coverage_plots plots = get_coverage_plots(['SDF4', 'TMEM229B'] , degnorm_dir=degnorm_dir) plots[0].show() Most pipeline runs involve 1000s of genes, so rendering a plot for all genes will likely take a bit of time. You can also save the resulting plots by specifying a save_dir argument to the path of a directory where you want to save the plots. Each gene is saved in a chromosome-level directory. You can still use genes='all' to generate a coverage plot for every gene. out = get_coverage_plots('all' , degnorm_dir=degnorm_dir , save_dir=degnorm_dir)","title":"get_coverage_plots"},{"location":"howtos/run_the_pipeline/","text":"Running DegNorm DegNorm is a command line interface (CLI) tool. You can access it through the degnorm command and the MPI-enabled distributed version is degnorm_mpi . Inputs You only need two types of files to supply degnorm - .bam files and a .gtf file if you have samtools in your $PATH . If you do not have samtools , you will also need bam index files to accompany your .bam files. 1. Align and sort reads data Before running DegNorm, you will need to sort (and optionally, index) them with samtools sort . This command just re-orders reads by chromosome and starting index, so that they can be more useful to DegNorm later on. To sort an alignment file, suppose it's called S1.bam , you can sort it with the following command: samtools sort S1.bam -o S1_sorted.bam DegNorm requires sorted .bam files because it really needs bam index files . If you don't create them first, DegNorm will run samtools index to create an index file for each input alignment file: samtools index S1_sorted.bam S1_sorted.bai 2. (Paired or single end) aligned and sorted reads data At least two alignment files (.bam) must be specified, as inter-sample degradation normalization cannot happen on a standalone RNA-Seq sample. Use p to refer to the total number of samples. If .bai files are not submitted, degnorm will look for .bai files named after the .bam files only with the \".bai\" extension. If no such file is found, degnorm will attempt to build one with the samtools index command. This will only work if the .bam files are sorted. Instead of specifying individual .bam and .bai files, you can just specify --bam-dir , a path to a directory holding the relevant .bam and .bai files. With --bam-dir , it is assumed that the .bai files are named according to the .bam files, only with the \".bai\" extension. You can supply paired reads files or single end reads files . Argument Required? Meaning --bam-files If neither --warm-start-dir nor --bam-dir are specified Set of individual .bam files --bai-files If samtools is not in the $PATH and neither --warm-start-dir nor --bam-dir are specified Set of individual .bai files. If specified, they must be in the order corresponding to --bam-files . --bam-dir If neither --warm-start-dir nor --bam-files are specified Directory containing .bam and .bai files for a pipeline run. It is assumed the .bai files have the same name as the .bam files, just with a different extension. -u , --unique-alignments optional flag If specified, tells degnorm to remove reads aligned to more than one location on the genome. Suggested for use with single end reads data. 3. Genome annotation file DegNorm needs a .gtf file in order to construct the total transcript and compute all per-gene coverage score curves. It is assumed your .gtf file abides by the standard conventions . Argument Required? Meaning -g , --genome-annotation Yes .gtf file for relevant genome. Using a warm start directory Loading multiple .bam files, parsing a .gtf file, and computing per-gene cross-sample coverage matrices and read counts, can take some time, but this is a one-time preprocessing cost given a specific set of RNA-Seq samples. If you run the degnorm pipeline once, you can leverage the stored coverage, read counts, and parsed transcript data from an existing DegNorm output directory to start a a new DegNorm run where all of the preprocessing is completed ahead of time. When using --warm-start-dir you do not need to supply a .gtf file. Argument Required? Meaning --warm-start-dir No A directory holding the contents of a successful previous degnorm pipeline run. When specified, there is no need to supply a .gtf file. Runtime and algorithmic parameters Argument Required? Meaning -o , --output-dir No Defaults to the current working directory. Use to specify location where pipeline output directory will be written. --plot-genes No Names of genes for which to render coverage plots. Sequence of explictly stated gene names or a .txt file containing one gene name per line. -d , --downsample-rate No EXPERIMENTAL. Integer downsampling rate. Systematic samples of a coverage matrix are used to speed up NMF iterations. --nmf-iter No Number of iterations per NMF-OA approximation. The higher the more accurate the approximation, but the more costly in terms of time. --iter No Number of whole DegNorm iterations. Default is 5. --minimax-coverage No Minimum cross-sample maximum coverage for a gene before it is included in the DegNorm pipeline. Can be used to exclude relatively low-coverage genes. -s , --skip-baseline-selection No EXPERIMENTAL. Flag to skip baseline selection, will greatly speed up DegNorm iterations. -p , --proc-per-node No Integer number of processes to spawn per compute node. The more the better. Example usage Sorting, indexing alignment files Remember - we have to sort and index the alignment files first, and then we can run degnorm . Suppose we have set of alignment files in our current working directory that we would like to send through DegNorm: # sort and index alignment files in current working directory. for FILE in ./*.bam do echo 'sorting '$FILE samtools sort $FILE -o ${FILE/.bam/}'_sorted.bam' echo 'indexing '${FILE/.bam/}'_sorted.bam' samtools index ${FILE/.bam/}'_sorted.bam' ${FILE/.bam/.bai} done Launching a full degnorm run \"the verbose way\" Next, after the alignment files have been sorted (and optionally indexed), let's run degnorm \"the verbose way\" by enumerating each .bam and .bai file individually. Suppose we have two sorted alignment files, S1_sorted.bam and S2_sorted.bam . # run degnorm on two samples on 20 cores, using 100 NMF iterations per gene degnorm --bam-files S1_sorted.bam S2_sorted.bam \\ --bai-files S1_sorted.bai S2_sorted.bai \\ -g human.gtf \\ -p 20 \\ -o degnorm_output If we did not specify any --bai-files , then DegNorm would automatically search for files \"S1_sorted.bai\" and \"S2_sorted.bai\" because they're named after the alignment files, \"S1_sorted.bam\" and \"S2_sorted.bam.\" If those index files cannot be found, they will be created in the same directory containing the input .bam files, only if samtools is in your $PATH . Launching a full degnorm run \"the easy way\" It's probably just easier to supply degnorm with an input directory containing all of our .bam files, instead of each .bam file individually. Suppose that data directory is located at degnorm_data/GBM . Let's also use 5 DegNorm iterations, 50 NMF iterations per gene per NMF iteration, and route output to a directory besides the current working directory. degnorm --bam-dir degnorm_data/GBM \\ -g human.gtf \\ -p 20 \\ --nmf-iter 50 \\ -o degnorm_output Using a warm start directory After one pipeline run, we could start degnorm from the output directory resulting from the first run - this directory is known as the \"warm start\" directory. This time, let's exclude genes with a maximum coverage (across all samples) less than 20, and run DegNorm with only 3 iterations. In this example, DegNorm_102118_081045 was generated automatically from one of the prior DegNorm runs. degnorm --warm-start-dir degnorm_output/DegNorm_102118_081045 \\ -p 20 \\ -o degnorm_output \\ --minimax-coverage 20 \\ --iter 3 Launching distributed runs with MPI Let's speed this up by distributing DegNorm's workload over multiple servers with degnorm_mpi ! If the mpi4py python package has been installed (meaning that MPICH is available in your compute environment). You can still specify the number of cores to use on each node with -p . # run degnorm_mpi using 4 nodes (\"-n 4\") mpiexec -n 4 degnorm_mpi \\ --warm-start-dir degnorm_output/DegNorm_GBM_102018 \\ -p 20 \\ -o degnorm_output \\ --minimax-coverage 20 --nmf-iter 100 The functionality of degnorm_mpi is the same as the single-node degnorm , so you can continue using warm start directories just like you could with degnorm . If you are unfamiliar with MPI, a great Output Raw and estimated coverage data are stored in separate .pkl files, one file per chromosome. See the posthoc analysis documentation for helper functions to access coverage data. In addition to per-gene coverage matrices, degnorm will produce raw and degradation-adjusted read counts, a matrix of degradation index scores, a matrix describing which genes were sent through the baseline selection procedure and when, along with various summary graphics and a pipeline summary report. The report will render as an .html file, but if you have pandoc installed it will be converted to a .pdf. \u251c\u2500\u2500 degnorm.log \u251c\u2500\u2500 degradation_index_scores.csv \u251c\u2500\u2500 ran_baseline_selection.csv # matrix of Booleans: which genes go thru baseline selection \u251c\u2500\u2500 gene_exon_metadata.csv # chromosome, gene, exon relationship data \u251c\u2500\u2500 read_counts.csv # raw read counts \u251c\u2500\u2500 adjusted_read_counts.csv # degradation normalized read counts \u251c\u2500\u2500 <SAMPLE_1> \u2502 \u251c\u2500\u2500 sample_SAMPLE_1_chr1.npz # full chrom coverage for sample 1 in compressed matrix. \u2502 \u251c\u2500\u2500 sample_SAMPLE_1_chr2.npz \u2502 \u251c\u2500\u2500 <more sample chromosome coverage .npz files> \u251c\u2500\u2500 <SAMPLE_2> \u2502 \u251c\u2500\u2500 sample_SAMPLE_2_chr1.npz \u2502 \u251c\u2500\u2500 sample_SAMPLE_2_chr2.npz \u2502 \u251c\u2500\u2500 <more per-sample chromosome coverage .npz files> \u251c\u2500\u2500 <more sample directories with chromosome coverage> \u251c\u2500\u2500 chr1 \u2502 \u251c\u2500\u2500 GAPDH_coverage.png \u2502 \u251c\u2500\u2500 <more coverage plots> \u2502 \u251c\u2500\u2500 coverage_matrices_chr1.pkl # (gene, raw coverage matrix) pairs in serialized python object. \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr1.pkl # (gene, estimated coverage matrix) pairs in serialized python object. \u251c\u2500\u2500 chr2 \u2502 \u251c\u2500\u2500 coverage_matrices_chr2.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr2.pkl \u251c\u2500\u2500 chr3 \u2502 \u251c\u2500\u2500 coverage_matrices_chr3.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr3.pkl \u251c\u2500\u2500 chr4 \u2502 \u251c\u2500\u2500 GAPDH_coverage.png \u2502 \u251c\u2500\u2500 coverage_matrices_chr4.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr4.pkl \u251c\u2500\u2500 <more chromosome directories> \u2502 \u251c\u2500\u2500 <more raw coverage matrix .pkl files> \u2502 \u2514\u2500\u2500 <more estimated coverage matrix .pkl files> \u2514\u2500\u2500 report \u251c\u2500\u2500 degnorm_summary.pdf # (or .html if pandoc not available) \u251c\u2500\u2500 di_boxplots.png \u251c\u2500\u2500 di_correlation.png \u2514\u2500\u2500 di_heatmap.png","title":"Running DegNorm"},{"location":"howtos/run_the_pipeline/#running-degnorm","text":"DegNorm is a command line interface (CLI) tool. You can access it through the degnorm command and the MPI-enabled distributed version is degnorm_mpi .","title":"Running DegNorm"},{"location":"howtos/run_the_pipeline/#inputs","text":"You only need two types of files to supply degnorm - .bam files and a .gtf file if you have samtools in your $PATH . If you do not have samtools , you will also need bam index files to accompany your .bam files.","title":"Inputs"},{"location":"howtos/run_the_pipeline/#1-align-and-sort-reads-data","text":"Before running DegNorm, you will need to sort (and optionally, index) them with samtools sort . This command just re-orders reads by chromosome and starting index, so that they can be more useful to DegNorm later on. To sort an alignment file, suppose it's called S1.bam , you can sort it with the following command: samtools sort S1.bam -o S1_sorted.bam DegNorm requires sorted .bam files because it really needs bam index files . If you don't create them first, DegNorm will run samtools index to create an index file for each input alignment file: samtools index S1_sorted.bam S1_sorted.bai","title":"1. Align and sort reads data"},{"location":"howtos/run_the_pipeline/#2-paired-or-single-end-aligned-and-sorted-reads-data","text":"At least two alignment files (.bam) must be specified, as inter-sample degradation normalization cannot happen on a standalone RNA-Seq sample. Use p to refer to the total number of samples. If .bai files are not submitted, degnorm will look for .bai files named after the .bam files only with the \".bai\" extension. If no such file is found, degnorm will attempt to build one with the samtools index command. This will only work if the .bam files are sorted. Instead of specifying individual .bam and .bai files, you can just specify --bam-dir , a path to a directory holding the relevant .bam and .bai files. With --bam-dir , it is assumed that the .bai files are named according to the .bam files, only with the \".bai\" extension. You can supply paired reads files or single end reads files . Argument Required? Meaning --bam-files If neither --warm-start-dir nor --bam-dir are specified Set of individual .bam files --bai-files If samtools is not in the $PATH and neither --warm-start-dir nor --bam-dir are specified Set of individual .bai files. If specified, they must be in the order corresponding to --bam-files . --bam-dir If neither --warm-start-dir nor --bam-files are specified Directory containing .bam and .bai files for a pipeline run. It is assumed the .bai files have the same name as the .bam files, just with a different extension. -u , --unique-alignments optional flag If specified, tells degnorm to remove reads aligned to more than one location on the genome. Suggested for use with single end reads data.","title":"2. (Paired or single end) aligned and sorted reads data"},{"location":"howtos/run_the_pipeline/#3-genome-annotation-file","text":"DegNorm needs a .gtf file in order to construct the total transcript and compute all per-gene coverage score curves. It is assumed your .gtf file abides by the standard conventions . Argument Required? Meaning -g , --genome-annotation Yes .gtf file for relevant genome.","title":"3. Genome annotation file"},{"location":"howtos/run_the_pipeline/#using-a-warm-start-directory","text":"Loading multiple .bam files, parsing a .gtf file, and computing per-gene cross-sample coverage matrices and read counts, can take some time, but this is a one-time preprocessing cost given a specific set of RNA-Seq samples. If you run the degnorm pipeline once, you can leverage the stored coverage, read counts, and parsed transcript data from an existing DegNorm output directory to start a a new DegNorm run where all of the preprocessing is completed ahead of time. When using --warm-start-dir you do not need to supply a .gtf file. Argument Required? Meaning --warm-start-dir No A directory holding the contents of a successful previous degnorm pipeline run. When specified, there is no need to supply a .gtf file.","title":"Using a warm start directory"},{"location":"howtos/run_the_pipeline/#runtime-and-algorithmic-parameters","text":"Argument Required? Meaning -o , --output-dir No Defaults to the current working directory. Use to specify location where pipeline output directory will be written. --plot-genes No Names of genes for which to render coverage plots. Sequence of explictly stated gene names or a .txt file containing one gene name per line. -d , --downsample-rate No EXPERIMENTAL. Integer downsampling rate. Systematic samples of a coverage matrix are used to speed up NMF iterations. --nmf-iter No Number of iterations per NMF-OA approximation. The higher the more accurate the approximation, but the more costly in terms of time. --iter No Number of whole DegNorm iterations. Default is 5. --minimax-coverage No Minimum cross-sample maximum coverage for a gene before it is included in the DegNorm pipeline. Can be used to exclude relatively low-coverage genes. -s , --skip-baseline-selection No EXPERIMENTAL. Flag to skip baseline selection, will greatly speed up DegNorm iterations. -p , --proc-per-node No Integer number of processes to spawn per compute node. The more the better.","title":"Runtime and algorithmic parameters"},{"location":"howtos/run_the_pipeline/#example-usage","text":"","title":"Example usage"},{"location":"howtos/run_the_pipeline/#sorting-indexing-alignment-files","text":"Remember - we have to sort and index the alignment files first, and then we can run degnorm . Suppose we have set of alignment files in our current working directory that we would like to send through DegNorm: # sort and index alignment files in current working directory. for FILE in ./*.bam do echo 'sorting '$FILE samtools sort $FILE -o ${FILE/.bam/}'_sorted.bam' echo 'indexing '${FILE/.bam/}'_sorted.bam' samtools index ${FILE/.bam/}'_sorted.bam' ${FILE/.bam/.bai} done","title":"Sorting, indexing alignment files"},{"location":"howtos/run_the_pipeline/#launching-a-full-degnorm-run-the-verbose-way","text":"Next, after the alignment files have been sorted (and optionally indexed), let's run degnorm \"the verbose way\" by enumerating each .bam and .bai file individually. Suppose we have two sorted alignment files, S1_sorted.bam and S2_sorted.bam . # run degnorm on two samples on 20 cores, using 100 NMF iterations per gene degnorm --bam-files S1_sorted.bam S2_sorted.bam \\ --bai-files S1_sorted.bai S2_sorted.bai \\ -g human.gtf \\ -p 20 \\ -o degnorm_output If we did not specify any --bai-files , then DegNorm would automatically search for files \"S1_sorted.bai\" and \"S2_sorted.bai\" because they're named after the alignment files, \"S1_sorted.bam\" and \"S2_sorted.bam.\" If those index files cannot be found, they will be created in the same directory containing the input .bam files, only if samtools is in your $PATH .","title":"Launching a full degnorm run \"the verbose way\""},{"location":"howtos/run_the_pipeline/#launching-a-full-degnorm-run-the-easy-way","text":"It's probably just easier to supply degnorm with an input directory containing all of our .bam files, instead of each .bam file individually. Suppose that data directory is located at degnorm_data/GBM . Let's also use 5 DegNorm iterations, 50 NMF iterations per gene per NMF iteration, and route output to a directory besides the current working directory. degnorm --bam-dir degnorm_data/GBM \\ -g human.gtf \\ -p 20 \\ --nmf-iter 50 \\ -o degnorm_output","title":"Launching a full degnorm run \"the easy way\""},{"location":"howtos/run_the_pipeline/#using-a-warm-start-directory_1","text":"After one pipeline run, we could start degnorm from the output directory resulting from the first run - this directory is known as the \"warm start\" directory. This time, let's exclude genes with a maximum coverage (across all samples) less than 20, and run DegNorm with only 3 iterations. In this example, DegNorm_102118_081045 was generated automatically from one of the prior DegNorm runs. degnorm --warm-start-dir degnorm_output/DegNorm_102118_081045 \\ -p 20 \\ -o degnorm_output \\ --minimax-coverage 20 \\ --iter 3","title":"Using a warm start directory"},{"location":"howtos/run_the_pipeline/#launching-distributed-runs-with-mpi","text":"Let's speed this up by distributing DegNorm's workload over multiple servers with degnorm_mpi ! If the mpi4py python package has been installed (meaning that MPICH is available in your compute environment). You can still specify the number of cores to use on each node with -p . # run degnorm_mpi using 4 nodes (\"-n 4\") mpiexec -n 4 degnorm_mpi \\ --warm-start-dir degnorm_output/DegNorm_GBM_102018 \\ -p 20 \\ -o degnorm_output \\ --minimax-coverage 20 --nmf-iter 100 The functionality of degnorm_mpi is the same as the single-node degnorm , so you can continue using warm start directories just like you could with degnorm . If you are unfamiliar with MPI, a great","title":"Launching distributed runs with MPI"},{"location":"howtos/run_the_pipeline/#output","text":"Raw and estimated coverage data are stored in separate .pkl files, one file per chromosome. See the posthoc analysis documentation for helper functions to access coverage data. In addition to per-gene coverage matrices, degnorm will produce raw and degradation-adjusted read counts, a matrix of degradation index scores, a matrix describing which genes were sent through the baseline selection procedure and when, along with various summary graphics and a pipeline summary report. The report will render as an .html file, but if you have pandoc installed it will be converted to a .pdf. \u251c\u2500\u2500 degnorm.log \u251c\u2500\u2500 degradation_index_scores.csv \u251c\u2500\u2500 ran_baseline_selection.csv # matrix of Booleans: which genes go thru baseline selection \u251c\u2500\u2500 gene_exon_metadata.csv # chromosome, gene, exon relationship data \u251c\u2500\u2500 read_counts.csv # raw read counts \u251c\u2500\u2500 adjusted_read_counts.csv # degradation normalized read counts \u251c\u2500\u2500 <SAMPLE_1> \u2502 \u251c\u2500\u2500 sample_SAMPLE_1_chr1.npz # full chrom coverage for sample 1 in compressed matrix. \u2502 \u251c\u2500\u2500 sample_SAMPLE_1_chr2.npz \u2502 \u251c\u2500\u2500 <more sample chromosome coverage .npz files> \u251c\u2500\u2500 <SAMPLE_2> \u2502 \u251c\u2500\u2500 sample_SAMPLE_2_chr1.npz \u2502 \u251c\u2500\u2500 sample_SAMPLE_2_chr2.npz \u2502 \u251c\u2500\u2500 <more per-sample chromosome coverage .npz files> \u251c\u2500\u2500 <more sample directories with chromosome coverage> \u251c\u2500\u2500 chr1 \u2502 \u251c\u2500\u2500 GAPDH_coverage.png \u2502 \u251c\u2500\u2500 <more coverage plots> \u2502 \u251c\u2500\u2500 coverage_matrices_chr1.pkl # (gene, raw coverage matrix) pairs in serialized python object. \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr1.pkl # (gene, estimated coverage matrix) pairs in serialized python object. \u251c\u2500\u2500 chr2 \u2502 \u251c\u2500\u2500 coverage_matrices_chr2.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr2.pkl \u251c\u2500\u2500 chr3 \u2502 \u251c\u2500\u2500 coverage_matrices_chr3.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr3.pkl \u251c\u2500\u2500 chr4 \u2502 \u251c\u2500\u2500 GAPDH_coverage.png \u2502 \u251c\u2500\u2500 coverage_matrices_chr4.pkl \u2502 \u2514\u2500\u2500 estimated_coverage_matrices_chr4.pkl \u251c\u2500\u2500 <more chromosome directories> \u2502 \u251c\u2500\u2500 <more raw coverage matrix .pkl files> \u2502 \u2514\u2500\u2500 <more estimated coverage matrix .pkl files> \u2514\u2500\u2500 report \u251c\u2500\u2500 degnorm_summary.pdf # (or .html if pandoc not available) \u251c\u2500\u2500 di_boxplots.png \u251c\u2500\u2500 di_correlation.png \u2514\u2500\u2500 di_heatmap.png","title":"Output"},{"location":"howtos/speedups/","text":"DegNorm speed enhancements Distributed pipeline runs with degnorm_mpi Use degnorm_mpi to distribute DegNorm over parallel compute nodes via MPI, the Message Passing Interface standard . With MPI, preprocessing and coverage matrix approximations will scale by the number of available compute nodes. MPI also allows you to best exploit the embarrassingly parallel nature of the DegNorm workload. See the degnorm_mpi example in the usage docs . Downsampling coverage matrices The backbone of the DegNorm normalization pipeline is the non-negative matrix factorization with over-approximation (NMFOA) algorithm. NMFOA is a computationally expensive algorithm, requiring --nmf-iter -many singular value decompositions of the coverage matrix. The SVD is O(n^3) in terms of flop count (according to Trefethen and Bau), so genes with smaller coverage matrices will naturally run through NMFOA faster than larger ones. In an effort to trim down the coverage matrices, the --downsample-rate argument in degnorm allows you to use a systematic sample for each gene's coverage matrix in lieu of the larger original ones. The --downsample-rate is just the integer-valued \"take-every\" step size, so that the original coverage matrix is reduced by a factor of 1 / (downsample rate). At a modest downsampling rate, the overall shape of the coverage curves should still be recognizable. Obviously, the higher the downsampling rate, the faster the DegNorm iterations will complete, because DegNorm executes SVD approximations on smaller and smaller gene coverage matrices. The figure below illustrates the time savings at various downsampling rates from the 9-sample gliablastoma (GBM) cell line study data set: Impact We recreated the DE analysis using the GBM data as well as the Sequencing Quality Control (SEQC) AA vs. AB data at various downsampling rates. In comparison to the non-downsampled results (as in, 1/1 downsampling), we see that moderate downsampling - e.g. a rate of 1/20 - does not substantially impact DE analysis and still allow for DegNorm retains its edge over existing RNA-Seq normalization methods, while offering 50%+ DegNorm iteration time savings. GBM RIN 10 vs. RIN 4 ECDF curve comparison GBM RIN 6 vs. RIN 4 ECDF curve comparison SEQC AA vs AB ROC curve comparison To run DegNorm with downsampling, add -d <take every> (full option --downsample-rate <take every> ) where take every is the integer step size for the systematic sample. Note that genes with total concatenated exon length less than the downsample rate will not be included in the DegNorm pipeline. Skipping baseline selection The most expensive part of the DegNorm normalization algorithm is in finding a \"baseline\" region of non-degraded coverage across all samples, a process referred to as baseline selection . In the event that that region is small, the approximation of a single gene's coverage curves may require over a thousand SVDs. Skipping baseline selection offers the largest speedup , more than any level of downsampling, but likely with a more heavy impact on DegNorm's performance. We cannot wholly endorse skipping baseline selection, but for those who are seeking ballpark DegNorm results in an hour or two, this option may be for you. Impact The impact of skipping baseline selection is experiment-specific, and is likely due to the nature and extent of RNA degradation present in the samples. As is shown in the figure below, the skipping baseline selection negatively impacts the SEQC AA/AB DE ROC curve. At the same time, DegNorm still retains its advantage over the existing normalization methods with respect to GBM p-value ECDF curves, even while skipping baseline selection. Run DegNorm without baseline selection at your own risk by adding the --skip-baseline-selection flag at the command line.","title":"Speed enhancements"},{"location":"howtos/speedups/#degnorm-speed-enhancements","text":"","title":"DegNorm speed enhancements"},{"location":"howtos/speedups/#distributed-pipeline-runs-with-degnorm_mpi","text":"Use degnorm_mpi to distribute DegNorm over parallel compute nodes via MPI, the Message Passing Interface standard . With MPI, preprocessing and coverage matrix approximations will scale by the number of available compute nodes. MPI also allows you to best exploit the embarrassingly parallel nature of the DegNorm workload. See the degnorm_mpi example in the usage docs .","title":"Distributed pipeline runs with degnorm_mpi"},{"location":"howtos/speedups/#downsampling-coverage-matrices","text":"The backbone of the DegNorm normalization pipeline is the non-negative matrix factorization with over-approximation (NMFOA) algorithm. NMFOA is a computationally expensive algorithm, requiring --nmf-iter -many singular value decompositions of the coverage matrix. The SVD is O(n^3) in terms of flop count (according to Trefethen and Bau), so genes with smaller coverage matrices will naturally run through NMFOA faster than larger ones. In an effort to trim down the coverage matrices, the --downsample-rate argument in degnorm allows you to use a systematic sample for each gene's coverage matrix in lieu of the larger original ones. The --downsample-rate is just the integer-valued \"take-every\" step size, so that the original coverage matrix is reduced by a factor of 1 / (downsample rate). At a modest downsampling rate, the overall shape of the coverage curves should still be recognizable. Obviously, the higher the downsampling rate, the faster the DegNorm iterations will complete, because DegNorm executes SVD approximations on smaller and smaller gene coverage matrices. The figure below illustrates the time savings at various downsampling rates from the 9-sample gliablastoma (GBM) cell line study data set:","title":"Downsampling coverage matrices"},{"location":"howtos/speedups/#impact","text":"We recreated the DE analysis using the GBM data as well as the Sequencing Quality Control (SEQC) AA vs. AB data at various downsampling rates. In comparison to the non-downsampled results (as in, 1/1 downsampling), we see that moderate downsampling - e.g. a rate of 1/20 - does not substantially impact DE analysis and still allow for DegNorm retains its edge over existing RNA-Seq normalization methods, while offering 50%+ DegNorm iteration time savings. GBM RIN 10 vs. RIN 4 ECDF curve comparison GBM RIN 6 vs. RIN 4 ECDF curve comparison SEQC AA vs AB ROC curve comparison To run DegNorm with downsampling, add -d <take every> (full option --downsample-rate <take every> ) where take every is the integer step size for the systematic sample. Note that genes with total concatenated exon length less than the downsample rate will not be included in the DegNorm pipeline.","title":"Impact"},{"location":"howtos/speedups/#skipping-baseline-selection","text":"The most expensive part of the DegNorm normalization algorithm is in finding a \"baseline\" region of non-degraded coverage across all samples, a process referred to as baseline selection . In the event that that region is small, the approximation of a single gene's coverage curves may require over a thousand SVDs. Skipping baseline selection offers the largest speedup , more than any level of downsampling, but likely with a more heavy impact on DegNorm's performance. We cannot wholly endorse skipping baseline selection, but for those who are seeking ballpark DegNorm results in an hour or two, this option may be for you.","title":"Skipping baseline selection"},{"location":"howtos/speedups/#impact_1","text":"The impact of skipping baseline selection is experiment-specific, and is likely due to the nature and extent of RNA degradation present in the samples. As is shown in the figure below, the skipping baseline selection negatively impacts the SEQC AA/AB DE ROC curve. At the same time, DegNorm still retains its advantage over the existing normalization methods with respect to GBM p-value ECDF curves, even while skipping baseline selection. Run DegNorm without baseline selection at your own risk by adding the --skip-baseline-selection flag at the command line.","title":"Impact"}]}